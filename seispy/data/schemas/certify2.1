Schema certify2.0
	Description ( "Certification Tests" )
	Detail {
		These databases document how to execute a test and
		provide some history of the results of tests.
	}
	Timedate lddate
	;

Attribute cd
	String (1)
	Format ( "%s" )
	Description ( "cd to results/testid directory if non-null" )
	Detail {
		Some programs are better run from inside the
		results/testid directory, for instance if they write
		multiple files.
	}
	;

Attribute cleanup
	String (100)
	Format ( "%-100s" )
	Description ( "command to execute after test success" )
	Detail {
		in case the test produces data outside the results directory
	}
	;

Attribute command
	String (100)
	Format ( "%-100s" )
	Description ( "command line arguments" )
	Detail {
		This command line is executed.  Input is redirected
		from input/testid, and output is redirected to
		results/testid.
	}
	;

Attribute description
	String (100)
	Format ( "%-100s" )
	Null ( "-" )
	Description ( "purpose of test" )
	Detail {
		brief description of features of test
	}
	;

Attribute diff
	String (150)
	Format ( "%-150s" )
	Description ( "command to check the results of execution" )
	Detail {
		This command is executed after the test to check for
		validity of the results.  If this is not specified,
		the default test is to compare results/testid with
		correct/testid.  For convenience, the following
		substitutions are performed before the test is
		executed:
		
		%r        results/testid
		%R  results/testid/testid
		%c        correct/testid
		%C  correct/testid/testid
	}
	;

Attribute environment
	String (100)
	Format ( "%-100s" )
	Description ( "initial environment variables" )
	Detail {
		The command is executed with these additional
		environment variables set.  (Should have the form
		env=value env2=value2, etcetera).
	}
	;

Attribute failure
	Time (17)
	Format ( "%17.5f" )
	Null ( "-9999999.99999" )
	Units ( "seconds" )
	Description ( "last time a test failed" )
	Detail {
		A record is kept of the last failure of a test.
	}
	;

Attribute failure_count
	Integer (10)
	Format ( "%10d" )
	Null ( "0" )
	Description ( "number of test failures" )
	Detail {
		This number is incremented whenever a test fails.
	}
	;

Attribute failure_host
	String (10)
	Format ( "%-10s" )
	Null ( "-" )
	Description ( "host on which last failed test was conducted" )
	Detail {
		The result of `uname -n`.
	}
	;

Attribute host
	String (10)
	Format ( "%-10s" )
	Null ( "-" )
	Description ( "host on which test was conducted" )
	Detail {
		The result of `uname -n`.
	}
	;

Attribute lddate
	Time (12)
	Format ( "%12.0f" )
	Null ( "0" )
	Units ( "seconds" )
	Description ( "load date for a particular record" )
	Detail {
		created automatically when a record is updated
	}
	;

Attribute pre
	String (100)
	Format ( "%-100s" )
	Description ( "command to execute before the test" )
	Detail {
		This command could create the input data.  If command
		changes the input data, then the pre command should create
		the input data in the directory results/testid.
	}
	;

Attribute program
	String (20)
	Format ( "%-20s" )
	Description ( "program to make" )
	Detail {
		This program is recreated using make if necessary.
	}
	;

Attribute release
	String (10)
	Format ( "%-10s" )
	Null ( "-" )
	Description ( "OS release number" )
	Detail {
		The result of `uname -r`
	}
	;

Attribute require
	String (10)
	Format ( "%-10s" )
	Description ( "test requires this characteristic" )
	Detail {
		Don't run test if machine doesn't have this characteristic:
			marmot   		e.g., kmieid test
			f77			requires fortran
			maps		requires map database
			regions		requires regions
			iasp91     		requires iasp91
			X			require X11 display
			Darwin
			Linux
			x86
			arm
	}
	;

Attribute avoid
	String (10)
	Format ( "%-10s" )
	Description ( "avoid tests on machines with" )
	Detail {
		Don't run test if machine has this characteristic:
			marmot   		don't run on the marmot
			Linux		don't run on linux
	}
	;

Attribute result
	Integer (1)
	Format ( "%d" )
	Null ( "9" )
	Description ( "result: 0=ok, 1=pre-command failed, 2=command failed 3=diff failed 4=make failed" )
	Detail {
		This is the result of running a test.
		0 test passed
		1 pre-command failed
		2 command failed
		3 diff failed
		4 make failed
		5 fault
	}
	;

Attribute returns
	Integer (3)
	Format ( "%3d" )
	Null ( "0" )
	Description ( "expected return code" )
	Detail {
		This is the return code to expect from the command.
	}
	;

Attribute success
	Time (17)
	Format ( "%17.5f" )
	Null ( "-9999999.99999" )
	Units ( "seconds" )
	Description ( "last time a test was performed successfully" )
	Detail {
		A record is kept of the last successful performance of a
		test.
	}
	;

Attribute success_count
	Integer (10)
	Format ( "%10d" )
	Null ( "0" )
	Description ( "number of test successes" )
	Detail {
		This number is incremented whenever a test succeeds.
	}
	;

Attribute success_host
	String (10)
	Format ( "%-10s" )
	Null ( "-" )
	Description ( "host on which last successful test was conducted" )
	Detail {
		The result of `uname -n`.
	}
	;

Attribute system
	Real (10)
	Format ( "%10.3f" )
	Null ( "-1.000" )
	Units ( "seconds" )
	Description ( "system time used by the command at last execution" )
	Detail {
		A large change in the cpu time may indicate a problem.
	}
	;

Attribute testid
	String (10)
	Format ( "%-10s" )
	Description ( "short descriptive identifier for test" )
	Detail {
		Input and result files are named after the testid.  In
		cases where the output results are not a single file, the
		results are to be saved in the directory results/testid.
	}
	;

Attribute time
	Time (17)
	Format ( "%17.5f" )
	Null ( "-9999999.99999" )
	Units ( "seconds" )
	Description ( "last time a test was performed" )
	Detail {
		A record is kept of the last performance of a
		test.
	}
	;

Attribute user
	Real (10)
	Format ( "%10.3f" )
	Null ( "-1.000" )
	Units ( "seconds" )
	Description ( "user time used by the command at last successful execution" )
	Detail {
		A large change in the cpu time may indicate a problem.
	}
	;

Attribute who
	String (10)
	Format ( "%-10s" )
	Description ( "user id" )
	Detail {
		user id
	}
	;

Attribute why
	String (60)
	Format ( "%-60" )
	Description ( "why an update?" )
	Detail {
		short description justifying the change
	}
	;

Relation certify
	Fields ( testid description program require avoid environment cd command returns pre cleanup diff lddate )
	Primary ( testid )
	Description ( "Certification tests to perform" )
	Detail {
		This is the list of tests which should be performed.
	}
	;

Relation history
	Fields ( testid release success success_host success_count system user failure failure_host failure_count )
	Primary ( testid release )
	Foreign ( testid )
	Description ( "History of test performance" )
	Detail {
		This is an abbreviated history of test performance.
	}
	;

Relation log
	Fields ( testid release time system user result host lddate )
	Primary ( testid release time )
	Foreign ( testid )
	Description ( "log of tests performed" )
	;

Relation updates
	Fields ( testid time host who release why lddate )
	Primary ( testid time )
	Description ( "updates to correct performance" )
	Detail {
		This shows when the "correct" results were updated.
		Because other things may change, like the diff or the
		xdiff options, this is not a complete list.
	}
	;

